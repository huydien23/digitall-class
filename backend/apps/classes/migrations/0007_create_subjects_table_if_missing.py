# Generated by Agent Mode to fix missing 'subjects' table when 0005 used state-only operations
from django.db import migrations

def create_subjects_table_if_missing(apps, schema_editor):
    connection = schema_editor.connection
    introspection = connection.introspection
    existing = set(introspection.table_names())
    if 'subjects' in existing:
        return

    vendor = connection.vendor
    with connection.cursor() as cursor:
        if vendor == 'mysql':
            # Create table without FK first to avoid duplicate constraint name issues
            cursor.execute(
                """
                CREATE TABLE IF NOT EXISTS `subjects` (
                  `id` bigint NOT NULL AUTO_INCREMENT,
                  `code` varchar(32) NOT NULL,
                  `name` varchar(128) NOT NULL,
                  `credits` smallint UNSIGNED NOT NULL DEFAULT 3,
                  `description` longtext NULL,
                  `created_by_id` bigint NULL,
                  PRIMARY KEY (`id`),
                  UNIQUE KEY `subjects_code_uniq` (`code`)
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
                """
            )
            # Try to add FK constraint if possible
            try:
                cursor.execute(
                    """
                    ALTER TABLE `subjects`
                    ADD CONSTRAINT `subjects_created_by_fk`
                    FOREIGN KEY (`created_by_id`) REFERENCES `users` (`id`)
                    ON DELETE SET NULL;
                    """
                )
            except Exception:
                # Ignore if it fails (constraint might already exist or incompatible)
                pass
        else:
            # Fallback: use schema_editor to create using historical model
            Subject = apps.get_model('classes', 'Subject')
            schema_editor.create_model(Subject)

class Migration(migrations.Migration):
    # MySQL cannot run DDL inside atomic transactions
    atomic = False

    dependencies = [
        ('classes', '0006_academicyear_is_current'),
    ]

    operations = [
        migrations.RunPython(create_subjects_table_if_missing, migrations.RunPython.noop),
    ]
