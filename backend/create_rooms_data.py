#!/usr/bin/env python
"""
Script ƒë·ªÉ t·∫°o d·ªØ li·ªáu m·∫´u cho c√°c khu v√† ph√≤ng h·ªçc
D·ª±a tr√™n c·∫•u tr√∫c th·ª±c t·∫ø c·ªßa tr∆∞·ªùng
"""

import os
import sys
import django
from datetime import datetime

# Add the project directory to Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Setup Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'student_management.settings')
django.setup()

from apps.rooms.models import Building, Room


def create_buildings():
    """T·∫°o c√°c khu"""
    print("üè¢ ƒêang t·∫°o c√°c khu...")
    
    buildings_data = [
        {
            'building_id': 'D',
            'building_name': 'Khu D',
            'building_type': 'academic',
            'description': 'Khu h·ªçc t·∫≠p ch√≠nh v·ªõi 4 t·∫ßng',
            'floors': 4,
            'address': 'T√≤a nh√† D - Khu h·ªçc t·∫≠p ch√≠nh'
        },
        {
            'building_id': 'T',
            'building_name': 'Khu T (Th∆∞ vi·ªán)',
            'building_type': 'library',
            'description': 'Khu th∆∞ vi·ªán v·ªõi c√°c ph√≤ng h·ªçc',
            'floors': 4,
            'address': 'T√≤a nh√† T - Khu th∆∞ vi·ªán'
        },
        {
            'building_id': 'I',
            'building_name': 'Khu I (IT)',
            'building_type': 'it',
            'description': 'Khu c√¥ng ngh·ªá th√¥ng tin v·ªõi 7 t·∫ßng',
            'floors': 7,
            'address': 'T√≤a nh√† I - Khu c√¥ng ngh·ªá th√¥ng tin'
        }
    ]
    
    created_count = 0
    for building_data in buildings_data:
        building, created = Building.objects.get_or_create(
            building_id=building_data['building_id'],
            defaults=building_data
        )
        if created:
            created_count += 1
            print(f"  ‚úÖ T·∫°o khu: {building.building_name}")
        else:
            print(f"  ‚ö†Ô∏è  Khu ƒë√£ t·ªìn t·∫°i: {building.building_name}")
    
    print(f"üìä T·∫°o {created_count} khu m·ªõi")
    return created_count


def create_rooms():
    """T·∫°o c√°c ph√≤ng h·ªçc"""
    print("üè´ ƒêang t·∫°o c√°c ph√≤ng h·ªçc...")
    
    # L·∫•y c√°c khu
    building_d = Building.objects.get(building_id='D')
    building_t = Building.objects.get(building_id='T')
    building_i = Building.objects.get(building_id='I')
    
    rooms_data = []
    
    # Khu D - 4 t·∫ßng
    for floor in range(1, 5):
        if floor == 4:
            # T·∫ßng 4 ch·ªâ c√≥ 1 ph√≤ng h·ªôi tr∆∞·ªùng
            rooms_data.append({
                'room_id': f'D{floor}-01',
                'room_name': f'D{floor}-01',
                'building': building_d,
                'floor': floor,
                'room_type': 'hall',
                'capacity': 400,
                'description': 'H·ªôi tr∆∞·ªùng l·ªõn'
            })
        else:
            # C√°c t·∫ßng kh√°c c√≥ 8 ph√≤ng
            for room_num in range(1, 9):
                rooms_data.append({
                    'room_id': f'D{floor}-{room_num:02d}',
                    'room_name': f'D{floor}-{room_num:02d}',
                    'building': building_d,
                    'floor': floor,
                    'room_type': 'lecture',
                    'capacity': 60,
                    'description': f'Ph√≤ng l√Ω thuy·∫øt t·∫ßng {floor}'
                })
    
    # Khu T (Th∆∞ vi·ªán) - T·∫ßng 1 v√† 4
    for floor in [1, 4]:
        if floor == 1:
            # T·∫ßng 1 c√≥ 6 ph√≤ng
            for room_num in range(1, 7):
                rooms_data.append({
                    'room_id': f'T{floor}-{room_num:02d}',
                    'room_name': f'T{floor}-{room_num:02d}',
                    'building': building_t,
                    'floor': floor,
                    'room_type': 'lecture',
                    'capacity': 60,
                    'description': f'Ph√≤ng l√Ω thuy·∫øt t·∫ßng {floor}'
                })
        else:
            # T·∫ßng 4 c√≥ 8 ph√≤ng
            for room_num in range(1, 9):
                rooms_data.append({
                    'room_id': f'T{floor}-{room_num:02d}',
                    'room_name': f'T{floor}-{room_num:02d}',
                    'building': building_t,
                    'floor': floor,
                    'room_type': 'lecture',
                    'capacity': 60,
                    'description': f'Ph√≤ng l√Ω thuy·∫øt t·∫ßng {floor}'
                })
    
    # Khu I (IT) - 7 t·∫ßng (t·ª´ t·∫ßng 2 ƒë·∫øn 7)
    for floor in range(2, 8):
        if floor == 7:
            # T·∫ßng 7 ch·ªâ c√≥ 2 ph√≤ng
            for room_num in range(1, 3):
                rooms_data.append({
                    'room_id': f'I{floor}-{room_num:02d}',
                    'room_name': f'I{floor}-{room_num:02d}',
                    'building': building_i,
                    'floor': floor,
                    'room_type': 'lecture',
                    'capacity': 60,
                    'description': f'Ph√≤ng h·ªçc ƒë∆∞·ªùng t·∫ßng {floor}'
                })
        else:
            # C√°c t·∫ßng kh√°c c√≥ 6 ph√≤ng
            room_type = 'practice' if floor in [3, 4, 5] else 'lecture'
            for room_num in range(1, 7):
                rooms_data.append({
                    'room_id': f'I{floor}-{room_num:02d}',
                    'room_name': f'I{floor}-{room_num:02d}',
                    'building': building_i,
                    'floor': floor,
                    'room_type': room_type,
                    'capacity': 60,
                    'description': f'Ph√≤ng {room_type} t·∫ßng {floor}'
                })
    
    # T·∫°o c√°c ph√≤ng
    created_count = 0
    for room_data in rooms_data:
        room, created = Room.objects.get_or_create(
            room_id=room_data['room_id'],
            defaults=room_data
        )
        if created:
            created_count += 1
            print(f"  ‚úÖ T·∫°o ph√≤ng: {room.room_name}")
        else:
            print(f"  ‚ö†Ô∏è  Ph√≤ng ƒë√£ t·ªìn t·∫°i: {room.room_name}")
    
    print(f"üìä T·∫°o {created_count} ph√≤ng m·ªõi")
    return created_count


def main():
    """T·∫°o t·∫•t c·∫£ d·ªØ li·ªáu m·∫´u"""
    print("üöÄ B·∫Øt ƒë·∫ßu t·∫°o d·ªØ li·ªáu m·∫´u cho khu v√† ph√≤ng h·ªçc...")
    
    try:
        buildings_count = create_buildings()
        rooms_count = create_rooms()
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        return
    
    print("\n‚úÖ Ho√†n th√†nh!")
    print(f"üìä T·ªïng k·∫øt:")
    print(f"  - Khu m·ªõi: {buildings_count}")
    print(f"  - Ph√≤ng m·ªõi: {rooms_count}")
    print(f"  - T·ªïng khu: {Building.objects.count()}")
    print(f"  - T·ªïng ph√≤ng: {Room.objects.count()}")


if __name__ == '__main__':
    main()
